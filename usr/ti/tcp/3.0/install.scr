#@(#)install.scr	1.98 92/03/06
# 	(C) COPYRIGHT, TEXAS INSTRUMENTS INCORPORATED, 1989.  ALL	
#	RIGHTS RESERVED.  PROPERTY OF TEXAS INSTRUMENTS INCORPORATED.	
#	RESTRICTED RIGHTS - USE, DUPLICATION, OR DISCLOSURE IS SUBJECT	
#	TO RESTRICTIONS SET FORTH IN TI'S PROGRAM LICENSE AGREEMENT AND	
#	ASSOCIATED DOCUMENTATION.					

if [ "`pwd`" != "/usr/tmp" ]
then
	echo "You MUST be in /usr/tmp to install TCP."
	echo 'Did you tar the TCP tape into /usr/tmp ?'
	exit 1
fi

if [ X$TERM = X ]; then
	echo "The environment variable TERM is not set."
	while true; do
		echo
		echo "What kind of terminal is this?"
		echo "          (1):      931"
		echo "          (2):      924"
		echo "          (3):      924 in 931 mode"
		echo "          (4):      928"
		echo "Enter the number of your selection or actual TERM type: \c"
		read type
		type="${type:-vt100}"
		if [ $type = "1" ]; then
			TERM=x5
			break
		fi
		if [ $type = "2" ]; then
			TERM=t1
			break
		fi
		if [ $type = "3" ]; then
			TERM=t9
			break
		fi
		if [ $type = "4" ]; then
			TERM=x1
			break
		fi
		echo "Do you want to set TERM to \"$type\" ? [y/n]: \c"
		read answer
		if [ "${answer:-y}" = "y" ]; then
			TERM=$type
			break
		fi
	done
	export TERM
fi
tput clear

# For the new 3.3.1 OS... Add chkspace to prevent installation problems
cp /usr/ti/tcp/3.0/chkspace /usr/tmp

# Check if enough disk space exists
echo
echo Running chkspace script ...
sh -xv chkspace
sync

# Check/install password for TCP/IP.
sh -xv inst.passwd 
sync

tput clear
echo 
echo "loading temporary files ..."
ar x tcp_lib1 
ar x tcp_lib2

# For the new 3.3 OS...
cd /usr/ti/tcp/3.0
cp netlogin.o telnet.o lmail.o node.cf relay.cf rlogind.o rwho.o \
   ftp.o rwhod.o ruptime.o telnetd.o inetd.o io_lib logger.o routed.o\
   sendmail.o ipmux.o tcp setcband installname chkccb settings \
   /usr/tmp

# For the new 3.3.1 OS - also remove ipmux.o along with tcp
cp removetcp /usr/ti/tcp
ar -r /usr/tmp/libsocket.a errlst.o TIsockvers.o

#For the new 3.3.1 OS - fix wait3.o (ultimately inetd)
ar -r /usr/tmp/libsocket.a wait3.o
#                     - add dummy nvs.o obj (in socket.o) for tcp3.0
cp socket.o /usr/tmp
#                     - Fix syslog messages in named.o for tcp3.0
cp named.o /usr/tmp
# 		      - Add Documentation for /dev/senet
cp strcf /usr/tmp
#		      - Fix slattach on multiprocessor systems
cp slattach /usr/tmp
#		      - Fix sldetach to force user to be root, etc.
cp sldetach /usr/tmp
#		      - Fix setslip called from /etc/tcp as /usr/etc/setslip
cp setslip.o /usr/tmp

cd /usr/tmp
sync

ar x io_lib
rm -rf tcp_lib1 tcp_lib2 io_lib
chmod 755 Tune
sync

if [ `cat  /etc/sitename` = sitename ]; then
	tput clear
echo "*********************************************************************"
echo "*                     H O S T   D E S I G N A T I O N               *"
echo "*********************************************************************"
	echo
	echo The name for this host has not been set.
	echo This must be set before you install TCP/IP.
	echo Set it now or quit.
	echo
	echo Do you want to set it now? [y/n]:" \c"
	read ok
	if [ X$ok = Xy -o X$ok = Xyes ]; then
		while true; do
			echo Enter sitename:" \c"
			read sitename
			echo Is $sitename correct? [y/n]:" \c"
			read ok1
			if [ X$ok1 = Xy -o X$ok1 = Xyes ]; then
				break
			else
				continue	
			fi
		done
		echo $sitename > /etc/sitename
	else
		touch normcomp
		exit 0
	fi
fi
setsite
echo "sitename set to: \c">conf.temp
cat /etc/sitename >>conf.temp
sync

tput clear
echo "********************************************************************"
echo "*             S I T E    N A M E    D E S I G N A T I O N          *"
echo "********************************************************************"
echo
echo "Internet Domain Names consist of three parts: the host name, the "
echo "subdomain name, and the top-level domain name.  For example, the name "
echo "of the computer at the Acme Manufacturing Co. is Coyote.  Therefore, "
echo "the Internet domain name would be:"
echo
echo "                        coyote.acme.com"
echo
echo "Coyote is the host name, acme is the name of the subdomain and"
echo "com is the Internet designation for a commercial organization."
echo "(edu: educational institutions, gov: government institutions,"
echo "mil: military groups)"
echo "In the above example, Coyote is only a node in the network mail system."
echo "His major mail relay machine is roadrunner.acme.com."
while true; do
	echo
	echo Do you want domain names appended to your hostname? [y/n]
	echo [Desirable if you plan to use the domain name server]:" \c"
	read ok
	if [ X$ok = Xy -o X$ok = XY ]; then
		dot=.
		echo
		echo Your host name is set to:" \c"
		echo `uname -n`
		echo
		echo Please enter your subdomain, e.g. acme: " \c"
		read sub
		echo
		echo Please enter your Domain, e.g. com:" \c"
		read domain
		echo
		echo Please enter the name of your Relay host: e.g. roadrunner.acme.com
		echo "(If you don't know who is your mail relay host, enter return,"
		echo "and your own machine will be designated.): \c"
		read relay
		if [ X$relay = X ]; then
			relay=`uname -n`.$sub.$domain
		fi
	else
		echo
		echo Please enter the name of your Relay host: e.g. roadrunner
		echo "(If you don't know who is your mail relay host, enter return,"
		echo "and your own machine will be designated.): \c"
		read relay
		if [ X$relay = X ]; then
			relay=`uname -n`
		fi
	fi
	echo
	echo Your machine will be designated as:  "\t"`uname -n`$dot$sub$dot$domain	
	echo Your mail relay will be:"\t\t"$relay
	echo
	echo Are these values correct? [y/n]:" \c"
	read ok
	if [ X$ok = Xn -o X$ok = Xno ]; then
		dot=
		sub=
		domain=
		continue
	fi
	break
done

sed "s/ZZSUBDOMAIN/$sub/g
s/ZZDOT/$dot/g
s/ZZDOMAIN/$domain/g" tcp > /tmp/tunetcp$$
mv /tmp/tunetcp$$ tcp
sync


tput clear
echo "********************************************************************"
echo "*          T I M E   D A E M O N   C O N F I G U R A T I O N       *"
echo "********************************************************************"
echo "
The TCP/IP package includes the timed utility.  This is a facility that allows
you to keep the date and time of machines on the network the same.  In order
for this to work you will have to have the timed process run on all the 
machines that you want controlled.  You will also have to designate at least
one machine as a master.  If there are multiple machines that are enabled as
potential masters, then one will be elected as the master.

Do you want to run timed on this host? [y/n]: \c"
read ok
if [ X$ok = Xy -o X$ok = Xyes -o X$ok = XY ]; then
	echo
	echo "Do you want this host to be a potential master? [y/n]: \c"
	read mok
	if [ X$mok = Xy -o X$mok = Xyes -o X$mok = XY ]; then
		echo
		echo modifying /etc/tcp...
		sed "s/\#ZZTKEYM\#/         /g" tcp > /usr/tmp/timetemp$$
		mv timetemp$$ tcp
	else
		echo
		echo modifying /etc/tcp...
		sed "s/\#ZZTKEY\#/        /g" tcp > /usr/tmp/timetemp$$
		mv timetemp$$ tcp
	fi
fi

echo "subdomain set to: $sub" >>conf.temp
echo "domain set to: $domain" >>conf.temp
echo "mail relay set to: $relay" >>conf.temp

if [ -r /usr/lib/sendmail.cf ]; then
	echo
	echo "saving existing /usr/lib/sendmail.cf..."
	mv /usr/lib/sendmail.cf /usr/ti/tcp
fi

if [ -r /usr/ti/tcp/sendmail.cf ]; then
	echo
	echo "Do you want to use your old mail configuration files "
	echo "instead of creating new ones? [y/n]: \c"
	read ok
	if [ X$ok = Xy -o X$ok = Xyes -o X$ok = XY ]; then
		cp /usr/ti/tcp/sendmail.cf /usr/tmp/`uname -n`.cf
		# Be sure user does not have an old version of
		# sendmail.cf that refers to the L.sys file which has
		# changed to Systems with the new UUCP code ..
		sed "s/L.sys/Systems/g" /usr/tmp/`uname -n`.cf > /usr/tmp/sendmail$$.cf
		mv /usr/tmp/sendmail$$.cf /usr/tmp/`uname -n`.cf
	else
		cp relay.cf `uname -n`.cf
		./Tune `uname -n`.cf `uname -n` $relay $domain $sub $dot
	fi
else
	cp relay.cf `uname -n`.cf
	./Tune `uname -n`.cf `uname -n` $relay $domain $sub $dot
fi
sync

#run the script to configure /etc/ccbdev, /etc/tcp and /etc/strcf
sh -xv chkccb 2>> /usr/ti/tcp/ccb.out
sync
touch ccb.temp
cat ccb.temp >> conf.temp
sync


tput clear
echo "********************************************************************"
echo "*      T C P / I P   C O M M A N D S   I N S T A L L A T I O N     *"
echo "********************************************************************"

if [ -f /usr/lib/libsocket.a ]; then
	echo 
	echo Saving old /usr/lib/libsocket.a to /usr/ti/tcp/libsocket.a...
	mv /usr/lib/libsocket.a /usr/ti/tcp/libsocket.a
fi

echo
echo "Installing the socket library in /usr/lib..."
mv libsocket.a /usr/lib
cd /usr/lib
chmod 444 libsocket.a
ar x libsocket.a TIsockvers.o
sync
cd /usr/tmp

echo
echo "Installing the TCP/IP and Socket header files..."

cd /usr/include
mkdir -m 775 net arpa protocols netinet
cd /usr/include/sys
mkdir -m 775 net netinet

cd /usr/tmp/head
# Change ALL header files to have read priviledge and common owner, etc.
# the permissions should be retained with mv even if umask conflicts
# or if file exists ...
find . ! -type d -exec chmod 444 {} \; -exec chown bin {} \; -exec chgrp bin {} \;
mv  netdb.h resolv.h strings.h sysexits.h syslog.h /usr/include

cd /usr/tmp/head/net
mv  af.h if.h protosw.h socketvar.h domain.h if_arp.h route.h \
    strioc.h /usr/include/net

cd /usr/tmp/head/netinet
mv icmp_var.h in_systm.h ip_str.h tcp_fsm.h udp.h if_ether.h in_var.h \
   ip_var.h tcp_seq.h udp_var.h if_sl.h insrem.h slip.h tcp_timer.h in.h \
   ip.h tcp.h tcp_var.h in_pcb.h ip_icmp.h tcp_debug.h tcpip.h \
   /usr/include/netinet

cd /usr/tmp/head/arpa
mv ftp.h inet.h nameser.h telnet.h tftp.h /usr/include/arpa

cd /usr/tmp/head/protocols
mv routed.h rwhod.h talkd.h timed.h /usr/include/protocols

cd /usr/tmp/head/sys
mv llcloop.h resource.h syslog.h vty.h nihdr.h TIhdr.h time.h wait.h \
   ipspa.h /usr/include/sys

cd /usr/tmp/head/sys/net
mv af.h if.h protosw.h socketvar.h domain.h if_arp.h \
   route.h strioc.h /usr/include/sys/net

cd /usr/tmp/head/sys/netinet
mv icmp_var.h in_systm.h ip_str.h tcp_fsm.h udp.h if_ether.h in_var.h \
   ip_var.h tcp_seq.h udp_var.h if_sl.h insrem.h slip.h tcp_timer.h in.h \
   ip.h tcp.h tcp_var.h in_pcb.h ip_icmp.h tcp_debug.h tcpip.h \
   /usr/include/sys/netinet
cd /usr/tmp
sync

rm -rf head

if [ -r /bin/rmail ]; then
	echo
	echo saving /bin/rmail to /bin/OLDrmail...
	mv /bin/rmail /bin/OLDrmail
	#mv /usr/catman/u_man/man1/rmail.1 /usr/ti/tcp
fi
sync
echo 
echo "Installing commands arp through trpt..."
make -f commands > /usr/ti/tcp/commands.out
sync

rm -f	tcpwhat		arpcom.o	finger.o	fingerd.o	\
	ftp.o		ftpd.o		hostname.o			\
	ifconfig.o	inetd.o		ipcheck		ldsocket.o	\
	lmail.o		logger.o	mkhosts		named.o		\
	netlogin.o	tcpstat.o	node.cf		nslookup.hlp	\
	nslookup.o	ping.o		rcmd.o		rcp.o		\
	rdate.o		relay.cf	mconnect.o 	mailstats.o	\
	rexecd.o	         	rlogin.o	rlogind.o	\
	rmail.o		route.o		routed.o	rshd.o		\
	ruptime.o	rwho.o		rwhod.o		sendmail.hf	\
	sendmail.o	setslip.o	sink.o		sinkd.o		\
	slattach	sldetach	slink.o		sockcf		\
	Tune		talk.o		talkd.o				\
	telnet.o	telnetd.o	tftp.o		tftpd.o		\
	timed.o		timedc.o	trpt.o	

sync

if [ -f /.cshrc ]; then
	echo
	echo Adding /usr/etc to PATH for the super user...
	# See if already installed, either tcp3.1 OR tcp3.0 versions
	egrep -v 'added by TCP/IP|set path=.?\( /usr/etc \$path|set path=.?\( \$path /usr/etc' \
		/.cshrc > pathtemp$$ ; cp pathtemp$$ /.cshrc
	echo 'set path=( $path /usr/etc ) # added by TCP/IP' >> /.cshrc
fi

if [ -f /.profile ]; then
	echo
	echo Adding /usr/etc to PATH for the root user...
	# See if already installed, either tcp3.1 OR tcp3.0 versions
	egrep -v 'added by TCP/IP|PATH=/usr/etc:\$PATH|PATH=\$PATH:/usr/etc' \
		/.profile > pathtemp$$ ; cp pathtemp$$  /.profile
	echo 'PATH=$PATH:/usr/etc # added by TCP/IP' >> /.profile
fi
rm -f  pathtemp$$
sync
echo
echo "Installing new online man pages..."
mv man_lib /usr/catman/u_man/man1
cd /usr/catman/u_man/man1
ar x man_lib

#special for 3.3 OS
cp /usr/ti/tcp/3.0/rwho.1 .

temp="	arp.1m	 	finger.1	fingerd.1m	ftp.1	 	\
	ftpd.1m	 	hostname.1	ifconfig.1m	inetd.1m	\
	ldsocket.1m	lmail.1m	logger.1	mkhosts.1m	\
	named.1m	netlogin.1m	tcpstat.1	nslookup.1	\
	ping.1m		rcmd.1		rcp.1		rdate.1m	\
	rexecd.1m	rlogin.1	rlogind.1m 	mkvty.1m	\
	rmail.1m	route.1m	routed.1m	rshd.1m		\
	ruptime.1	rwho.1		rwhod.1m	sendmail.1m	\
	slattach.1m	slink.1m	talk.1		talkd.1m	\
	tcp.1m		telnet.1	telnetd.1m	tftp.1		\
	tftpd.1m	timed.1m	timedc.1m	trpt.1m"

chmod 644 $temp
chgrp bin $temp
chown bin $temp

rm man_lib
sync
cd /usr/tmp


echo
echo adding configuration for sendmail...
cp /dev/null /usr/lib/sendmail.st
chown root /usr/lib/sendmail.st
chmod 644 /usr/lib/sendmail.st
cp /dev/null /usr/lib/sendmail.fc
chown root /usr/lib/sendmail.fc
chmod 644 /usr/lib/sendmail.fc
rm -f /usr/bin/newaliases  /usr/bin/mailq
cp /usr/lib/sendmail  /usr/bin/mailq
cp /usr/lib/sendmail  /usr/bin/newaliases
if [ -r /usr/spool/mqueue -o -d /usr/spool/mqueue ]; then 
	rm -rf /usr/spool/mqueue
fi
mkdir -m 755 /usr/spool/mqueue
chown root /usr/spool/mqueue 
sync

if [ -r /usr/lib/mail -o -d /usr/lib/mail ]; then 
	rm -rf /usr/lib/mail
fi
mkdir -m 775 /usr/lib/mail 
touch /usr/lib/mail/localhosts
touch /usr/lib/mail/uucpindomain
touch /usr/lib/uucp/Systems
echo "set sendmail=/usr/lib/sendmail" >> /usr/lib/mailx/mailx.rc
install -s -f /usr/lib -m 0644 -u root `uname -n`.cf
mv /usr/lib/`uname -n`.cf /usr/lib/sendmail.cf
rm `uname -n`.cf

# part of patch tcp30009
echo
echo "modify the /usr/lib/sendmail.cf file to call lmail with only one user..."
sed 's/Mlocal, P=\/usr\/bin\/lmail, F=CDFPMlms, S=10, R=20, A=lmail \$u/Mlocal, P=\/usr\/bin\/lmail, F=CDFPMls, S=10, R=20, A=lmail \$u/' < /usr/lib/sendmail.cf > tmp.tcp30009
mv tmp.tcp30009 /usr/lib/sendmail.cf

# part of patch tcp30011
echo
echo "Changing the /etc/inetd.conf file to enable udp time reporting..."
sed 's/#time	dgram/time	dgram/' < /etc/inetd.conf > tmp.tcp30011
mv tmp.tcp30011 /etc/inetd.conf

sync
echo
echo "Adding the TCP/IP error messages to the master message file..."

cd /usr/ti
if test ! -f master.noTCP
    then cp master master.noTCP
fi

#--------------------------MESSAGES-------------------------------------
if fgrep '<%%> Inserted TCP messages start' master > /dev/null
then
        csplit -s -f tcptmp master '/<%%> Inserted TCP messages start/' \
	                         '/<\*\*> TCP\/IP messages end here/'
        cat tcptmp00 /usr/tmp/messages tcptmp02 > master.tmp
        mv master.tmp master
        rm tcptmp00 tcptmp01 tcptmp02
else
        csplit -s -f tcptmp master '/<\*\*> TCP\/IP messages end here/'
        cat tcptmp00 /usr/tmp/messages tcptmp01 > master.tmp
        mv master.tmp master
        rm tcptmp00 tcptmp01
fi
sync

#-------------------------KERNEL MESSAGES-------------------------------
if fgrep '<%%> Inserted TCP kernel messages start' master > /dev/null
then
        csplit -s -f tcptmp master '/<%%> Inserted TCP kernel messages start/' \
	                         '/<\*\*> TCP\/IP kernel messages end here/'
        cat tcptmp00 /usr/tmp/kmessages tcptmp02 > master.tmp
        mv master.tmp master
        rm tcptmp00 tcptmp01 tcptmp02
else
        csplit -s -f tcptmp master '/<\*\*> TCP\/IP kernel messages end here/'
        cat tcptmp00 /usr/tmp/kmessages tcptmp01 > master.tmp
        mv master.tmp master
        rm tcptmp00 tcptmp01
fi
#-----------------------------------------------------------------------

echo
echo "Building the new ptext and stext files..."
mkmsg master /ti/ptext/USA /ti/stext/USA
rm -f ptext stext # Install used to leave these as byproduct of install.
cd /usr/tmp
rm -f messages kmessages
sync

tput clear
echo "********************************************************************"
echo "*      T C P / I P   C O M M A N D S   C O N F I G U R A T I O N   *"
echo "********************************************************************"
if [ -r /etc/hosts ]; then
	echo
	echo "saving existing /etc/hosts..."
	mv /etc/hosts /usr/ti/tcp
fi

if [ -r /usr/ti/tcp/hosts ]; then
	echo
	echo "Do you want to use your old hosts file"
	echo "instead of creating a new one? [y/n]: \c"
	read ok
	if [ X$ok = Xy -o X$ok = Xyes -o X$ok = XY ]; then
		cp /usr/ti/tcp/hosts /etc/hosts
	else
		cp ./hosts /etc/hosts
		rm -f hosts
	fi
else
	cp ./hosts /etc/hosts
	rm -f hosts
fi
chmod 644 /etc/hosts

if [ -r /etc/networks ]; then
	echo
	echo "saving existing /etc/networks..."
	mv /etc/networks /usr/ti/tcp
fi

if [ -r /usr/ti/tcp/networks ]; then
	echo
	echo "Do you want to use your old networks file"
	echo "instead of creating a new one? [y/n]: \c"
	read ok
	if [ X$ok = Xy -o X$ok = Xyes -o X$ok = XY ]; then
		cp /usr/ti/tcp/networks /etc/networks
	else
		cp ./networks /etc/networks
		rm -f networks
	fi
else
	cp ./networks /etc/networks
	rm -f networks
fi
chmod 644 /etc/networks

if [ -r /etc/hosts.equiv ]; then
	echo
	echo "saving existing /etc/hosts.equiv..."
	mv /etc/hosts.equiv /usr/ti/tcp
fi

if [ -r /usr/ti/tcp/hosts.equiv ]; then
	echo
	echo "Do you want to use your old hosts.equiv file"
	echo "instead of creating a new one? [y/n]: \c"
	read ok
	if [ X$ok = Xy -o X$ok = Xyes -o X$ok = XY ]; then
		cp /usr/ti/tcp/hosts.equiv /etc/hosts.equiv
	else
		cp ./hosts.equiv /etc/hosts.equiv
		rm -f hosts.equiv
	fi
else
	cp ./hosts.equiv /etc/hosts.equiv
	rm -f hosts.equiv
fi
# The old hosts.equiv file possibly saved from old release may have
# comments in it - they are NOT supported and can cause
# strange bugs in sendmail addr parsing. Remove comments.
if [ -s /etc/hosts.equiv ]; then
	echo 'Removing comments from /etc/hosts.equiv - they are not supported'
	echo 'g/^#/d
w
q' | ed - /etc/hosts.equiv > /dev/null
	sync
fi
chmod 644 /etc/hosts.equiv
sync

echo
echo creating /usr/adm/syslog...
touch /usr/adm/syslog

echo 
echo creating the /usr/adm/streams directory...
if [ ! -d /usr/adm/streams ]; then
	mkdir /usr/adm/streams
fi

echo
echo creating /usr/spool/rwho...
if [ -r /usr/spool/rwho -o -d /usr/spool/rwho ]; then 
	rm -rf /usr/spool/rwho
fi 
mkdir -m 775 /usr/spool/rwho 

echo
echo creating /usr/spool/locks...
if [ -r /usr/spool/locks -o -d /usr/spool/locks ]; then  
	rm -rf /usr/spool/locks
fi
# properties below defined in /src/build/s.dirs
mkdir -m 777 /usr/spool/locks 
chown uucp /usr/spool/locks
chgrp uucp /usr/spool/locks

chmod 744 installname Primary Secondary Caching

echo
echo creating /usr/lib/named...
if [ -r /usr/lib/named -o -d /usr/lib/named ]; then  
	rm -rf /usr/lib/named
fi
mkdir -m 644 /usr/lib/named 
mv installname Caching Secondary Primary /usr/ti/tcp
mv named.b.ca named.b.sec named.b.pri named.hosts named.local \
named.rev named.soa Eroot.cache root.cache rfc1033 resolv.conf \
/usr/ti/tcp/named

sync
echo
echo updating /etc/download...
echo /tcp start/D > /usr/tmp/sfile$$
sed -f /usr/tmp/sfile$$  /etc/download >> tempload$$
mv tempload$$ /etc/download
echo tcp start >> /etc/download
chmod 770 /etc/download
chgrp root /etc/download
chown root /etc/download
rm -f sfile$$ tempload$$

echo
echo updating /etc/shutdown...
echo "\t/etc/tcp stop" > shuttemp$$
echo /tcp stop/D > /usr/tmp/sfile1$$
sed -f /usr/tmp/sfile1$$  /etc/shutdown >> tempload1$$
csplit -s -f csplittmp1 tempload1$$ '/killall/'
cat csplittmp100 shuttemp$$ csplittmp101 > shutdown
mv shutdown  /etc/shutdown
chmod 755 /etc/shutdown
chgrp root /etc/shutdown
chown root /etc/shutdown
rm -f csplittmp100 csplittmp101 shuttemp$$ sfile1$$ tempload1$$

echo
echo updating /bin/sysboot... 
echo "\t/etc/tcp stop" > shuttemp$$
echo /tcp stop/D > /usr/tmp/sfile1$$
sed -f /usr/tmp/sfile1$$  /bin/sysboot > tempload2$$
csplit -s -f csplittmp1 tempload2$$ '/killall/'
cat csplittmp100 shuttemp$$ csplittmp101 > sysboot
mv sysboot  /bin/sysboot
chmod 700 /bin/sysboot
chgrp root /bin/sysboot
chown root /bin/sysboot
rm -f csplittmp100 csplittmp101 shuttemp$$ tempload2$$
sync

tput clear
echo "********************************************************************"
echo "*      T C P / I P   D E V I C E   I N S T A L L A T I O N         *"
echo "********************************************************************"
while true; do
	echo
	echo "How many virtual terminals do you want? [0 - 256]: \c"
	read vtys
	echo
	echo "You have specified: $vtys.  Is this correct? [y/n] \c"
	read ok
	if [ X$ok = Xy -o X$ok = Xyes ]; then
		break
	fi
done
echo
echo "Making new devices..."
echo
echo "creating $vtys /dev/ttyp[nn]""'""s and /dev/ptyp[nn]""'""s..."
install -s -f /usr/ti/tcp -m 0755 -u bin -g bin mkvty
rm -f /dev/ttyp* 
rm -f /dev/ptyp*
/usr/ti/tcp/mkvty $vtys
rm -f mkvty
echo "number of vty's created: $vtys" >>conf.temp
sync

sed "s/ZZVTYS/$vtys/g" /usr/tmp/settings > /usr/tmp/tempsets$$
mv /usr/tmp/tempsets$$ /usr/tmp/settings

if [ -c /dev/slip ]; then
	rm -f /dev/slip
fi
mknod /dev/slip c 54 65
echo /dev/slip 
if [ -c /dev/socksys ]; then
	rm -f /dev/socksys
fi
mknod /dev/socksys c 62 0
echo /dev/socksys 
if [ -c /dev/lo0 ]; then
	rm -f /dev/lo0
fi
mknod /dev/lo0 c 51 0
echo /dev/lo0 
if [ -c /dev/llcloop ]; then
	rm -f /dev/llcloop
fi
mknod /dev/llcloop c 54 57
echo /dev/llcloop 
if [ -c /dev/cl01 ]; then
	rm -f /dev/cl01
fi
mknod /dev/cl01 c 54 0
echo /dev/cl01 
if [ -c /dev/tmux ]; then
	rm /dev/tmux
fi
mknod /dev/tmux c 52 0
echo /dev/tmux 


if [ -d /dev/inet ]; then
	rm -rf /dev/inet
fi

mkdir /dev/inet
mknod /dev/inet/arp c 54 60
echo /dev/inet/arp
mknod /dev/inet/icmp c 54 56
echo /dev/inet/icmp
mknod /dev/inet/ip c 54 55
echo /dev/inet/ip
mknod /dev/inet/rip c 54 58
echo /dev/inet/rip
mknod /dev/inet/tcp c 54 59
echo /dev/inet/tcp
mknod /dev/inet/udp c 54 61
echo /dev/inet/udp

chmod 755 /dev/inet
# llcloop and arp are now 666 instead of 644
chmod 666 /dev/llcloop /dev/slip
chmod 666 /dev/inet/arp /dev/inet/icmp /dev/inet/ip /dev/inet/rip
chmod 666 /dev/inet/tcp /dev/inet/udp
sync
sleep 2

tput clear
echo "********************************************************************"
echo "*      T C P / I P   K E R N E L   I N S T A L L A T I O N         *"
echo "********************************************************************"
echo "archiving new kernel parts... "

echo 
if [ -r /usr/sys/OLDinet.o ]; then
	cd /usr/sys
	echo saving /usr/sys/io.lib kernel pieces...
	ar -x io.lib inet.o arp.o ip.o ip_icmp.o llcloop.o rip.o slip.o \
	socket.o tcp.o udp.o vty.o
	cp inet.o arp.o ip.o ip_icmp.o llcloop.o rip.o slip.o \
	socket.o tcp.o udp.o vty.o /usr/ti/tcp
	ar -d io.lib inet.o arp.o ip.o ip_icmp.o llcloop.o rip.o slip.o \
	socket.o tcp.o udp.o vty.o
	cd /usr/tmp
else
	echo saving inet.o of /usr/sys/io.lib to /usr/sys/OLDinet.o...
	ar -x /usr/sys/io.lib /usr/sys/inet.o
	mv /usr/sys/inet.o /usr/sys/OLDinet.o
fi 

echo Replacing objects in /usr/sys/io.lib...
temp="inet.o arp.o ip.o ip_icmp.o llcloop.o rip.o slip.o socket.o \
       tcp.o udp.o vty.o ipmux.o"
ar -r /usr/sys/io.lib $temp
sync
rm -f $temp

cp /usr/tmp/setcband /usr/tmp/settings /usr/tmp/clrcband /usr/ti/tcp
sync

recordPATCH() {
	# log an entry into the patch log for TCP/IP.
	if [ ! -d /usr/ti/patch ]; then 
		echo
		mkdir /usr/ti/patch
	fi
	echo "INSTALLED:	TCP/IP 3.0	`date` " >> /usr/ti/patch/tcp
}

echo
echo "Do you wish to build a new kernel now? [y/n]: \c"
read ok
if [ X$ok = Xy -o X$ok = Xyes ]; then
	echo
	echo "Which boot band would you like the new kernel installed in?"
	while true; do
		echo [unx2 or unx3]:" \c"
		read bband
		if [ X$bband = Xunx2 -o X$bband = Xunx3 ]; then
			if [ X$bband = Xunx2 ]; then
				cband=cfg2
			else
				cband=cfg3
			fi
			break
		fi
		echo
	done	
	cd /usr/sys
	echo
	mnttab=`ls -l /etc/mnttab`
	mnttab=`echo $mnttab | cut -f5 -d" "`
	if [ $mnttab != "0" ]; then
	while true; do
		dfvol=`df / | cut -f5 -d"/" | cut -f1 -d:`
		echo "Partition / was found on system volume: $dfvol."
		echo ------------------------------------------------
		df / | cut -f1-2 -d:
		echo ------------------------------------------------
		echo "On which volume do you want this boot band installed?"
		if [ X$dfvol = X ]; then
			echo "Enter system volume name: \c"
		else
			echo "Enter system volume name (or just return for $dfvol): \c"
		fi
		read newvolume
		if [ X$newvolume = X ]; then
			volume=$dfvol
			break
		else
			volume=$newvolume
		fi
		echo "You've specified: $volume.  Is this correct? [y/n]: \c"
		read ok
		if [ X$ok = Xy -o X$ok = Xyes ]; then
			break
		else
			continue
		fi
	done
	else
	while true; do
		echo "On which system volume do you want this boot band installed?"
		echo "Enter system volume name (or just return for \"sys\"): \c"
		read newvolume
		if [ X$newvolume = X ]; then
			volume=sys
			break
		else
			volume=$newvolume
		fi
		echo "You've specified: $volume.  Is this correct? [y/n]: \c"
		read ok
		if [ X$ok = Xy -o X$ok = Xyes ]; then
			break
		else
			continue
		fi
	done
	fi
	echo
	echo "Making new unix.new..."
	make 2> /usr/ti/tcp/kernel.out   # error msgs saved here.
	if [ $? != 0 -o -s /usr/ti/tcp/kernel.out ]; then # any error messages??
		cat /usr/ti/tcp/kernel.out # echo error message
		echo "ERROR: making /usr/sys/unix.new failed!!"
		exit 255
	fi
	sync
	echo
	echo Installing unix.new in $bband...
	if [ X$volume = X ]; then
		make $bband
	else
		make $bband VOLNAME=$volume
	fi
	sync
	echo "kernel made with boot band set to: $bband" >>conf.temp
	echo "kernel made with system volume set to: $volume" >>conf.temp
	echo
	echo "Setting cband parameters in /dev/dsk/$volume:$cband..."
	sh /usr/tmp/setcband /dev/dsk/$volume:$cband < /usr/tmp/settings
	echo "cband parameters set in: /dev/dsk/$volume:$cband" >>conf.temp
	cat /usr/tmp/settings >>conf.temp
	sync
	echo
	echo "In order to use the default boot partition you will need to"
	echo "increase the cband parameters along with a \"make default\"."
	echo "Do you want this script to increase the parameters now? [y/n]: \c"
	read ok
	if [ X$ok = Xy -o X$ok = Xyes ]; then
		echo "Setting cband parameters in /dev/dsk/$volume:cfg1..."
		sh /usr/tmp/setcband /dev/dsk/$volume:cfg1 < /usr/tmp/settings
	else
		echo 
		echo "Parameters have not been increased.  Don't forget to "
		echo "increase them so you can run TCP from default!"
		echo "You can do this by running the script setcband in"
		echo "/usr/ti/tcp.  Instructions are contained in that file."
	fi
	echo
	echo saving /unix to /unix.noTCP... 
	mv /unix /unix.noTCP
	sync
	echo 
	echo copying /usr/sys/unix.new to /unix...
	cp /usr/sys/unix.new /unix
	echo
	echo TCP/IP and the new kernel are now installed.  Reboot your system.
	cd /usr/tmp
	echo
	echo cleaning up...
	make -f commands clobber >>/usr/ti/tcp/commands.out
	sync
	rm -rf *
	recordPATCH
	touch normcomp
	sync
	exit 0
fi

echo
echo "Only TCP/IP has been installed.  You will need to rebuild your kernel"
echo "with the new io.lib, install it in the desired boot band and then reboot"
echo "from that correct boot band.  You will also need to increase the cband"
echo "parameters for the cband that you wish to boot.  To do this, execute the "
echo "script setcband in /usr/ti/tcp.  The script contains instructions at"
echo "the top."

cd /usr/tmp
echo
echo cleaning up...
make -f commands clobber >>/usr/ti/tcp/commands.out
sync
rm -rf *
recordPATCH
touch normcomp
sync
