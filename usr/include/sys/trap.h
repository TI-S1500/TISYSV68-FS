/*
	(C) COPYRIGHT, TEXAS INSTRUMENTS INCORPORATED, 1985.  ALL
	RIGHTS RESERVED.  PROPERTY OF TEXAS INSTRUMENTS INCORPORATED.
	RESTRICTED RIGHTS - USE, DUPLICATION, OR DISCLOSURE IS SUBJECT
	TO RESTRICTIONS SET FORTH IN TI'S PROGRAM LICENSE AGREEMENT AND
	ASSOCIATED DOCUMENTATION.
*/

#ifdef	SCCSID
static char trap_h[] = "@(#)trap.h	1.5 (TI) 88/11/23";
#endif	SCCSID

/*	@(#)trap.h	2.5	UNIX System V/68 */
/*
 * Trap type values
 */

/*
*****************************************************
	The following traps apply to the Motorola 68K
	family of processors.  These defines are used
	by os/trap.c in the UNIX kernel.
*****************************************************
*/

#define BUSERR	2	/* Bus Error/Segment Violation (SIGBUS) */
#define ADDRERR	3	/* Address Error (SIGSEGV) */
#define INSTERR	4	/* Illegal Instruction Trap (SIGILL) */
#define ZDVDERR	5	/* Zero Divide Trap (SIGFPE) */
#define CHKTRAP	6	/* CHK Trap (SIGSEGV) */
#define TRAPVFT	7	/* TRAPV instruction fault (SIGILL) */
#define PRIVFLT	8	/* privileged instruction fault (SIGILL) */
#define TRCTRAP	9	/* Trace Trap (SIGTRAP) */
#define L1010FT	10	/* Line 1010 Emulator Trap (SIGILL) */
#define L1111FT	11	/* Line 1111 Emulator Trap (SIGILL) */
#define STRAYFT	24	/* Spurious Interrupt */

/*
***************************************************************
	The following are generated by the 68K TRAP instruction
***************************************************************
*/

#define SYSCALL	32	/* TRAP 0 - System Call Trap */
#define BPTFLT	33	/* TRAP 1 - Breakpoint Trap (SIGTRAP) */
#define IOTTRAP	34	/* TRAP 2 - Simulate DEC IOT Trap (SIGIOT) */
#define EMTTRAP	35	/* TRAP 3 - Simulate DEC EMT Trap (SIGEMT) */
#define FPETRAP	36	/* TRAP 4 - Floating Point Exception Trap (SIGFPE) */
#define FPBSUN	48	/* FPU Branch/set unordered exception */
#define FPINX	49	/* FPU Inexact value exception */
#define FPZDV	50	/* FPU divide by zero exception */ 
#define FPUNL	51	/* FPU underflow exception */
#define FPOPER  52	/* FPU Operand error exception */
#define FPOVL	53	/* FPU Overflow exception */
#define FPNAN	54	/* FPU Not a number exception */

#define RESCHED	0	/* Pseudo trap to signal rescheduling */


/*
***************************************************************
	The following structure defines the argument list
	upon entry to an interrupt handler
***************************************************************
*/

struct intarg
{
	long d0;	/* user registers */
	long d1;
	long d2;
	long d3;
	long d4;
	long d5;
	long d6;
	long d7;
	long a0;
	long a1;
	long a2;
	long a3;
	long a4;
	long a5;
	long a6;
	long ps;			/* status register */
	long pc;			/* program counter */
	unsigned short	format:4,	/* frame type */
			vec:12;		/* vector offset */
};
struct tasretry
{
	short		retry;		/* total retry count	*/
	short		count;		/* record of retries	*/
	struct proc *	procp;		/* last proc		*/
	int		faddr;		/* last fault address	*/
	short		last_gasp;	/* trying one last gasp	*/
	short		success;	/* number of successes	*/
};
