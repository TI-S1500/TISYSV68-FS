INIT(1M)                                                 INIT(1M)

NAME
     init - Provides process control initialization

SYNOPSIS
     init 0123456SsQqz

     update

     /etc/brc
     /etc/bcheckrc
     /etc/checkups
     /etc/rc

DESCRIPTION
   Purpose
     The primary role of init is to create processes from a
     script stored in the file /etc/inittab as explained in
     inittab(4).  This file usually has init generate getty
     processes on each user login line.  It also controls
     autonomous processes required by any particular system.

     The update command executes the sync(2) system call every
     few seconds.  This ensures that the file system is
     relatively current in case of a crash.  This command should
     not be executed directly, but should be executed out of the
     initialization shell command file.  See update(1) for
     details.

     The programs /etc/brc, /etc/bcheckrc, /etc/checkups, and
     /etc/rc are system initialization shell scripts. They may be
     customized for your application environment.  See Shell
     Scripts in this manual entry.

   Options
     The following are options for the init command:

     0123456Ss
          Indicate run levels, as explained in Discussion.

     Q or q
          Causes init to reexamine the inittab file.

     z    Causes init not to respawn processes. This is used only
          by shutdown(1) shortly before init s.

   Discussion
     The init command considers the system to be in a run level
     at any given time.  A run level can be viewed as a software
     configuration of the system; each configuration allows only
     a selected group of processes to exist.  The processes
     generated by init for each of these run levels are defined
     in the inittab file.  The command can be in one of eight run
     levels, 0 through 6, S, or s.  The run level is changed by
     having a privileged user run /etc/init.  This user-generated
     init sends appropriate signals to the original init created
     by the operating system when the system was rebooted,
     telling it which run level to change to.

     The init command is invoked by TI System V as the last step
     in the boot procedure.  The first thing init does is to look
     for /etc/inittab. If /etc/inittab exists, init checks for an
     entry of the type initdefault as explained in inittab(4).
     If the entry exists, init uses the run level specified in
     that entry as the initial run level to enter.  If a run
     level other than S or s is specified, init pauses when the
     system is booted and displays the following prompt:

          Enter root password to enter single user mode
          or Ctrl-c to continue to default init level.

          Password:

     If single-user mode is desired, enter the root password.
     The system remains in single-user mode and you have super-
     user privileges.  The default boot continues if you type
     Ctrl-c or enter no response within about 5 seconds after the
     prompt appears.  After maintenance is complete, you may
     continue the boot from single-user mode by typing init run-
     level, where run-level is the desired run level (usually 2).
     If this entry is not in inittab or inittab is not found,
     init requests that the user enter a run level from the
     virtual system console, /dev/syscon.  If an S or s is
     entered, init goes into the single-user run level.  This is
     the only run level that does not require the existence of a
     properly formatted inittab file.  If /etc/inittab does not
     exist, then by default, the only legal run level that init
     can enter is single-user.  In the single-user run level the
     virtual console terminal /dev/syscon is opened for reading
     and writing, and the command /bin/su is invoked immediately.
     To exit from the single-user run level, the user can select
     one of two options.  First, if the shell is terminated (with
     end-of-file marker), init reprompts for a new run level.
     Second, the init command can signal init and force it to
     change the run level of the system.

     When attempting to boot the system, init may fail to prompt
     for a new run level because the device /dev/syscon is linked
     to a device other than the physical system teletype
     (/dev/systty). If this failure occurs, init can be forced to
     relink /dev/syscon if the user types a delete character on
     the system teletype located with the processor.

     When init prompts for the new run level, the user can enter
     only one of the digits 0 through 6 or the letters S or s.
     If S is entered, init operates as previously described in
     single-user mode with the additional result that /dev/syscon
     is linked to the user's terminal line, thus making it the
     virtual system console.  A message is generated on the
     physical console, /dev/systty, saying where the virtual
     terminal has been relocated.

     When init comes up initially and whenever it switches out of
     the single-user run level to its normal run level, it sets
     the ioctl(2) modes of the virtual console, /dev/syscon, to
     those modes saved in the file /etc/ioctl.syscon.  This file
     is written by init whenever single-user mode is entered.  If
     this file does not exist when init wants to read it, a
     warning is printed and default settings are assumed.

     If 0 through 6 is entered, init enters the corresponding run
     level.  Any other input is rejected and the user is
     reprompted.  If this is the first time init has entered a
     run level other than single-user, init first scans inittab
     for special entries of the type boot and bootwait.  These
     entries are performed, if the run level entered matches that
     of the entry before any normal processing of inittab takes
     place. In this way, any special initialization of the
     operating system, such as mounting file systems, can take
     place before users are allowed onto the system.  The inittab
     file is scanned to find all entries that are to be processed
     for that run level.

     Run level 2 is usually defined by the user to contain all of
     the terminal processes and daemons that are generated in the
     multiuser environment.

     In a multiuser environment, the inittab file is usually set
     up so that init creates a process for each terminal on the
     system.

     For terminal processes, ultimately the shell terminates
     because of an end-of-file condition either typed explicitly
     or generated as the result of hanging up. When init receives
     a signal that a process it created has died, it records the
     fact and the reason the process died in /etc/utmp and
     /etc/wtmp if it exists.  A history of the processes
     generated is kept in /etc/wtmp if such a file exists. The
     files /etc/utmp and /etc/wtmp are described in who(1).

     To create each process in the inittab file, init reads each
     entry and for each entry that should be regenerated, it
     creates a process.  After it has generated all of the
     processes specified by the inittab file, init waits for one
     of its descendant processes to die or until init is signaled
     by init to change the system's run level.  When one of these
     conditions occurs, init reexamines the inittab file.  New
     entries can be added to the inittab file at any time;
     however, init still waits for one of the above conditions to
     occur to reexamine the inittab file.  To provide for an
     instantaneous response, the init Q or init q command can
     wake init to reexamine the
     inittab file.

     When init is requested to change run levels, init sends the
     warning signal (SIGTERM) to all processes that are undefined
     in the target run level.  init waits 20 seconds before
     forcibly terminating these processes with the kill signal
     (SIGKILL).

   Shell Scripts
     The following shell procedures are executed via entries in
     /etc/inittab by init(1M) when the system is changed out of
     single-user mode.  These shell procedures can be used for
     several run-level states.  The who(1) command can be used to
     get the run-level information.

     /etc/brc
          The brc procedure clears the mounted file system table,
          /etc/mnttab.  See mnttab(4).

     /etc/bcheckrc
          The bcheckrc procedure performs all necessary
          consistency checks to prepare the system to change into
          multiuser mode.  It prompts the user to set the system
          date and to check the file systems with fsck(1M).

     /etc/checkups
          The checkups procedure checks to see if the last boot
          was produced by a powerfail condition.

     /etc/rc
          The rc procedure starts all system daemons before the
          terminal lines are enabled for multiuser mode.  In
          addition, file systems are mounted; the RAM disk (if
          any) is initialized, filled, and mounted; and
          accounting, error logging, and system activity logging
          are activated in this procedure.  The /usr/lib/lpsched
          command is specified within the /etc/rc file to create
          the LP spooler.

FILES
     /etc/inittab
     /etc/utmp
     /etc/wtmp
     /etc/ioctl.syscon
     /dev/syscon
     /dev/systty
     /etc/download
               Downloads communications carrier boards (CCBs) and
               network terminal concentrators (TCs); called by
               init 2

SEE ALSO
     getty(1M), inittab(4), ioctl(2), kill(2), login(1), sh(1),
     sync(1), sync(2), utmp(4), who(1).

DIAGNOSTICS
     If init finds that it is regenerating an entry from
     /etc/inittab more than 10 times in 2 minutes, it assumes
     that there is an error in the command string and generates
     an error message on the system console. It does not
     regenerate this entry for 5 minutes or until it receives a
     signal from a user init.  This system prevents init from
     using system resources when someone makes a typographical
     error in the inittab file or when a program is removed that
     is referenced in the inittab file.


