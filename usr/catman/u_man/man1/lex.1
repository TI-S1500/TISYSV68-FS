LEX(1)                                                     LEX(1)

NAME
     lex - Generates programs for simple lexical tasks

SYNOPSIS
     lex -cntv files

DESCRIPTION
   Purpose
     The lex command generates programs to be used in simple
     lexical analysis of text.

   Options
     The options must appear before any files.

     -c   Indicates C actions and is the default.

     -n   Causes the -v summary not to print.

     -t   Causes the result of the lex command to be written to
          standard output instead of to the file named lex.yy.c.

     -v   Provides a one-line summary of statistics of the
          generated analyzer.

     Certain table sizes for the resulting finite state machine
     can be set in the definitions section:

          %p n   number of positions is n (default 2000)

          %n n   number of states is n (500)

          %t n   number of parse tree nodes is n (1000)

          %a n   number of transitions is n (3000)

     The use of one or more of the above automatically implies
     the -v option unless the -n option is used.

   Arguments
     Multiple files are treated as a single file.  If no files
     are specified, standard input is used.

     The input files contain strings and expressions to be
     searched for, and C text to be executed when strings are
     found.

   Discussion
     A file named lex.yy.c is generated, which, when loaded with
     the library, copies the input to the output except when a
     string specified in the file is found.  Then the
     corresponding program text is executed.  The actual string
     matched is left in an external character array named yytext.
     Matching is done in order of the strings in the file.  The
     strings may contain square brackets to indicate character
     classes, as in [abx-z] to indicate a, b, x, y, and z; the
     operators *, +, and ?  mean respectively any non-negative
     number of, any positive number of, and either zero or one
     occurrences of, the previous character or character class.
     The character . is the class of all ASCII characters except
     newline.  Parentheses for grouping and vertical bar for
     alternation are also supported.  The notation r{d,e} in a
     rule indicates between d and e instances of regular
     expression r.  It has higher precedence than |, but lower
     than *, ?, +, and concatenation.  The character ^ at the
     beginning of an expression permits a successful match only
     immediately after a newline, and the character $ at the end
     of an expression requires a trailing newline.  The character
     / in an expression indicates trailing context; only the part
     of the expression up to the slash is returned in yytext, but
     the remainder of the expression must follow in the input
     stream.  An operator character may be used as an ordinary
     symbol if it is within " symbols or preceded by \.  Thus
     [a-zA-Z]+ matches a string of letters.

     Three subroutines defined as macros are expected:  input()
     to read a character; unput(c) to replace a character read;
     and output(c) to place an output character.  They are
     defined in terms of the standard streams, but you can
     override them.  The program generated is named yylex(), and
     the library contains a main() which calls it.  The action
     REJECT on the right side of the rule causes this match to be
     rejected and the next suitable match executed; the function
     yymore() accumulates additional characters into the same
     yytext; and the function yyless(p) pushes back the portion
     of the string matched beginning at p, which should be
     between yytext and yytext+yyleng.  The macros named input
     and output use files yyin and yyout to read from and write
     to, defaulted to stdin and stdout, respectively.  The
     external names generated by lex all begin with the prefix yy
     or YY.

     Any line beginning with a blank is assumed to contain only C
     text and is copied; if it precedes %%, it is copied into the
     external definition area of the lex.yy.c file.  All rules
     should follow a %%, as in yacc(1).  Lines preceding %% that
     begin with a non-blank character define the string on the
     left to be the remainder of the line.  This string can be
     called out later by surrounding it with {}.  Note that curly
     brackets do not imply parentheses; only string substitution
     is done.

EXAMPLE
     Assume that the file named lexfile consists of the following
     lines.

          %%
          [A-Z] putchar (yytext[O]+'a'-'A');
          [ ]+$
          [ ]+ putchar(' ');

     The following lex command accesses instructions from lexfile
     and prints the result to the standard output.

          lex -t lexfile

     The lex instructions in lexfile are as follows:

     + Convert from uppercase to lowercase

     + Remove blanks at the end of lines

     + Replace multiple blanks with single blanks

PROMPTS
   Input File Name:
     Enter the name of the file that contains text to be searched
     and commands to execute.

   Print Summary:
     Initial value is yes.  If you enter no, the summary of
     statistics is not printed.

   Write Results to Standard Output:
     Initial value is no.  If you enter yes, the results of this
     process are written to standard output.

   Summary of Statistics:
     Initial value is no.  If you enter yes, a summary of
     statistics is written.

SEE ALSO
     yacc(1).
     ``Lexical Analyzer Generator'' in the TI System V Support
     Tools Guide.


