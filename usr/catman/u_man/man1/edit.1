EDIT(1)                                                   EDIT(1)

NAME
     edit - Invokes the text editor (variant of ex for casual
     users)

SYNOPSIS
     edit -r files

DESCRIPTION
   Purpose
     The edit program is a variant of the text editor ex
     recommended for new or casual users who wish to use a
     command-oriented line editor.

   Option
     -rfile
          Recover the file named file after an editor or system
          crash.  If file is not specified, a list of all saved
          files is printed.

   Getting Started
     To edit the contents of an existing file, begin with the
     following command to the shell:

          edit filename

     The edit command makes a copy of the file, which you can
     then edit.  The command reports line and character numbers
     in the file.  To create a new file, type the word edit
     followed by a space and a new file name.

     Edit prompts for commands with the character `:', which you
     should see after starting the editor.  If you are editing an
     existing file, then you have some lines in the edit buffer
     (its name for the copy of the file you are editing).  Most
     commands to edit use the ``current line'' if you do not
     specify which line to use.

   Commands
     Press Return after entering each edit command.

     p or print
          Prints the current line.

     d or delete
          Deletes the current line and prints the new current
          line.  When you start editing, edit makes the last line
          of the file the current line.  If you delete this last
          line, then the new last line becomes the current one.
          In general, after a delete, the next line in the file
          becomes the current line.  (Deleting the last line is a
          special case.)

     a or append
          If you start with an empty file or wish to add some new
          lines, you can use this command.  After you enter this
          command, edit reads lines from your terminal, placing
          these lines after the current line.  You terminate the
          input process by typing a line consisting of just a ..
          The last line of text before the . line becomes the
          current line.

     i or insert
          Places the lines you enter before the current line
          (rather than after the current line, as with append).

     1    The edit command numbers the lines in the buffer; the
          first line is number 1.  If you give the command 1,
          edit types this first line. If you then give the
          command delete, edit deletes the first line, line 2
          becomes line 1, and edit prints the current line (the
          new line 1) so you can see where you are.  In general,
          the current line is always the last line affected by a
          command.

     s or substitute
          Make a change to some text within the current line.
          You type s/old/new/, where old is replaced by the
          characters you want to eliminate and new is the new
          characters you want to insert.

     f or file
          The command file (f) tells you how many lines are in
          the buffer you are editing and says ``[Modified]'' if
          you have changed it.

     w or write
          After modifying a file you can put the buffer text back
          to replace the file by giving a write (w) command.

     q or quit
          Leaves the editor.  If you run edit on a file, but do
          not change it, it is not necessary (but does no harm)
          to write the file back. If you try to quit from edit
          after modifying the buffer without writing it out, you
          are warned that there has been ``No write since last
          change'' and edit awaits another command.  If you wish
          not to write the buffer out, you can issue another quit
          command.  The buffer is then irretrievably discarded,
          and you return to the shell.

     c or change
          Changes the current line to a sequence of lines you
          supply (as with append you terminate change with a line
          consisting of only a .).  You can tell change to change
          more than one line by giving the line numbers of the
          lines you want to change, i.e., 3,5change.  You can
          print lines this way too.  Thus 1,23p prints the first
          23 lines of the file.

     u or undo
          Reverses the effect of the last command that changed
          the buffer.  Thus, if a substitute command does not do
          what you want, you can type undo and the old contents
          of the line are restored.    You can also undo an undo
          command so that you can continue to change your mind.
          The edit program issues a warning message when commands
          you give affect more than one line of the buffer.  If
          the amount of change seems unreasonable, type undo and
          look to see what happened.  If you decide that the
          change is ok, then you can type undo again to get it
          back.  Note that commands such as write and quit cannot
          be undone.

     =    Gives the total number of lines in the entire input
          file.

     .=   Reports the line number of the current line.  This is
          useful if you wish to move or copy a section of text
          within a file or between files.  Find out the first and
          last line numbers you wish to copy or move (say 10 to
          20).  For a move, you can then type 10,20delete a,
          which deletes these lines from the file and places them
          in a buffer named a. The edit program has 26 such
          buffers named a through z. You can later get these
          lines back by typing put a to put the contents of
          buffer a after the current line.  If you want to move
          or copy these lines between files you can give an edit
          (e) command after copying the lines, following it with
          the name of the other file you wish to edit, i.e., edit
          chapter2.  By changing delete to yank in the command
          shown above, you can get a pattern for copying lines.
          If the text you wish to move or copy is all within one
          file it is not necessary to use named buffers.
          10,20move $, for example, moves lines 10 through 20 to
          the end of the file.

   To Show the Text
     To look at the next line in the buffer, press RETURN.  To
     look at a number of lines, press CRTL-D (control key and,
     while it is held down, D key, then let up both) rather than
     RETURN.  This shows you a half screen of lines on a VDT or
     12 lines on a hardcopy terminal.  You can look at the text
     surrounding the current line by giving the command z..  The
     current line becomes the last line printed; you can return
     to the line where you were before the z. command by
     specifying \\.  The z command can also be given the
     following characters.

     z-   Prints a screen of text (or 24 lines) ending where you
          are.

     z+   Prints the next screenful.

     If you want less than a screenful of lines you can specify
     the number you want.  For example, z.12 produces 12 lines of
     text.  This method of giving counts can be used with other
     commands.  You can delete 5 lines starting with the current
     line with the command delete 5.

     You can use line numbers to find things in a file; since the
     line numbers change when you insert and delete lines, this
     is somewhat unreliable.  You can search backward and forward
     in the file for strings by giving commands of the form
     /text/ to search forward for text or ?text?  to search
     backward for text. If a search reaches the end of the file
     without finding the text, it wraps, end around, and
     continues to search back to the current line.  A useful
     feature is a search of the form /^text/ which searches for
     text at the beginning of a line.  Similarly, /text$/
     searches for text at the end of a line.  You can leave off
     the trailing / or ? in these commands.

     The current line has a symbolic name .; this is most useful
     in a range of lines, as in .,$print, which prints the rest
     of the lines in the file.  To get to the last line in the
     file you can refer to it by its symbolic name $.  Thus the
     command $ delete or $d deletes the last line in the file, no
     matter which line was the current line before.  Arithmetic
     with line references is also possible.  Thus the line $-5 is
     the fifth before the last, and .+20 is 20 lines after the
     present one.

PROMPTS
   File Name:
     Enter a file name to be edited.

SEE ALSO
     ex (1), vi (1).


